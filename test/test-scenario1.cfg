process TEST = {

  // -- Load default module/services configurations -- //

  // Message logger service
  include "FWCore/MessageService/data/MessageLogger.cfi"

  // Ideal geometry producer
  include "Geometry/TrackerRecoData/data/trackerRecoGeometryXML.cfi"

  // Interface to ideal geometry producer
  include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"


  // -- Specific configurations -- //

  // Empty event source
  source = EmptySource 
  {
        untracked int32 maxEvents = 1 
  }

  // Database output service
  service = PoolDBOutputService
  {
	string connect = "sqlite_file:Alignments.db"
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 1
	untracked string catalog = "file:condbcatalog.xml"
	VPSet toPut = {
	  { 
		untracked string containerName = "Alignments" 
		string tag = "Alignments_init" 
	  },
	  { 
		untracked string containerName = "AlignmentErrors" 
		string tag = "AlignmentErrors_init" 
	  }
	}
  }


  // Misalignment example scenario producer
  include "Alignment/TrackerAlignment/data/ORCAShortTermScenario.cfi"
  replace MisalignedTracker.dumpBefore = false
  replace MisalignedTracker.dumpAfter = false
  replace MisalignedTracker.saveToDbase = false

  // Test module
  module prod =  TestAnalyzer { untracked string fileName = "ORCA-scenario1.root" }

  path p1 = { prod }      

  module print = AsciiOutputModule {}

  endpath ep = { print }

}
